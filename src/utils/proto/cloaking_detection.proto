package cloaking_detection;

// This is the learned sites. Learn each site separately.
// For one site, there may be several patterns, each pattern has 
// its own distribution.
message LearnedSites {
  repeated SitePatterns site = 1;
  optional string timestamp = 2;
}

message SitePatterns {
  required string name = 1;
  repeated Pattern pattern = 2;
}

message Pattern {
  required double mean = 1;
  required double std = 2;
  repeated Item item = 3;
}

message Item {
  required uint64 simhash = 1;
  optional uint64 count = 2 [default = 1];
}

// Sites to classify. This is used in learning and detection phase.
message ObservedSites {
  repeated SiteObservations site = 1;
}

message SiteObservations {
  required string name = 1;
  repeated Observation observation = 2;
}

message Observation {
  required string landing_url = 1;
  required string file_path = 2;
  optional string timestamp = 3;
  optional uint64 text_simhash = 4;
  optional uint64 dom_simhash = 5;
}

// Text features
message HtmlText {
  repeated Feature word = 1;
  repeated Feature bi_gram = 2;
  repeated Feature tri_gram = 3;
}

// Dom tree features
message HtmlDom {
  repeated Feature node = 1;
  repeated Feature bi_node = 2;
  repeated Feature tri_node = 3;
}

message Feature {
  required string name = 1;
  optional int32 int_value = 2 [default = 1];
  optional double double_value = 3;
  optional string string_value = 4;
}

// Configuration for simhash computing
message SimhashConfig {
  enum SimhashType {
    TEXT = 0;
    DOM = 1;
    TEXT_DOM = 2;  // First TEXT, then DOM
  }
  required SimhashType simhash_type = 1;
  message FeatureUsage {
    optional bool gram = 1 [default = true];
    optional bool bi_gram = 2 [default = true];
    optional bool tri_gram = 3 [default = false];
  }
  optional FeatureUsage usage = 2;
  optional int32 maximum_threads = 3 [default = 10];
}

// Configuration for simhash clustering
message ClusterConfig {
  enum Algorithm {
    HAMMING_THRESHOLD = 0;  // Deprecated. Because have no theory support.
    K_MEANS = 1;  
    SPECTRAL_CLUSTERING = 2;
    HIERARCHICAL_CLUSTERING = 3;
  }
  required Algorithm algorithm = 1;
  optional int32 cluster_number = 2;
  optional int32 maximum_threads = 3 [default = 10];
}

