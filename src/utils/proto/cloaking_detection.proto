package cloaking_detection;

// Requires protocol buffer version >= 2.3.0

// This is the learned sites. Learn each site separately.
// For one site, there may be several patterns, each pattern has 
// its own distribution.
message LearnedSites {
  repeated SitePatterns site = 1;
  optional string timestamp = 2;
}

message SitePatterns {
  required string name = 1;
  repeated Pattern pattern = 2;
}

message Pattern {
  // mean and std is used for NORMAL_DISTRIBUTION
  required double mean = 1;
  required double std = 2;
  repeated SimhashItem item = 3 [deprecated=true];
  // centroid and threshold is used for GRADIENT_DESCENT
  repeated double centroid = 4 [packed=true];
  optional int32 size = 5;
  optional double threshold = 6;
}

message SimhashItem {
  required uint64 simhash = 1;
  optional uint64 count = 2 [default = 1];
}

// Sites to classify. This is used in learning and detection phase.
message ObservedSites {
  repeated SiteObservations site = 1;
  optional SimhashConfig config = 2;
}

message SiteObservations {
  required string name = 1;
  repeated Observation observation = 2;
}

message Observation {
  required string landing_url = 1;
  required string file_path = 2;
  optional string timestamp = 3;
  optional uint64 text_simhash = 4;
  optional uint64 dom_simhash = 5;
}

// Text features
message HtmlText {
  repeated Feature word = 1;
  repeated Feature bi_gram = 2;
  repeated Feature tri_gram = 3;
}

// Dom tree features
message HtmlDom {
  repeated Feature node = 1;
  repeated Feature bi_node = 2;
  repeated Feature tri_node = 3;
}

message Feature {
  required string name = 1;
  optional int32 int_value = 2 [default = 1];
  optional double double_value = 3;
  optional string string_value = 4;
}

enum SimhashType {
  TEXT = 0;
  DOM = 1;
  TEXT_DOM = 2;  // First TEXT, then DOM
}

message SimhashConfig {
  required SimhashType simhash_type = 1;
  message FeatureUsage {
    optional bool gram = 1 [default = true];
    optional bool bi_gram = 2 [default = true];
    optional bool tri_gram = 3 [default = false];
  }
  optional FeatureUsage usage = 2;
  optional int32 maximum_threads = 3 [default = 10];
}

// Configuration for simhash clustering
message Algorithm {
  enum AlgoName {
    HAMMING_THRESHOLD = 0;  // Deprecated. Because have no theory support.
    K_MEANS = 1;  
    SPECTRAL_CLUSTERING = 2;
    HIERARCHICAL_CLUSTERING = 3;
  }
  required AlgoName name = 1;
  optional int32 thres = 2; // thres used by hamming threshold
  optional int32 k = 3;  // k used by k-means, and spectral clustering
  optional int32 left_out_ratio = 4;  // left out ratio used by hierarchical clustering
}

message ClusterConfig {
  required Algorithm algorithm = 1;
  optional int32 minimum_cluster_size = 2 [default = 2];
  optional int32 maximum_threads = 3 [default = 10];
  optional SimhashType simhash_type = 4 [default = TEXT];
}

// Configuration for cloaking detection
message DetectionConfig {
  enum Algorithm {
    NORMAL_DISTRIBUTION = 0;  // Use (mean + std_constant * std) as threshold
    // Assume threshold to be k_i, for cluster i. 
    // Object function = sum(Type I error) + sum(Type II error), compute to get k_i.
    GRADIENT_DESCENT = 1;  
  }
  required Algorithm algorithm = 1;
  optional int32 std_constant = 2;
  optional SimhashType simhash_type = 3 [default = TEXT];
}

// Crawler data structures, used by crawler to store information.
message CrawlConfig {
  optional int32 maximum_threads = 1;
  optional string user_agent = 2;
  optional string user_agent_md5_dir = 3;
  enum BrowserType {
    CHROME = 0;
    FIREFOX = 1;
  }
  optional BrowserType browser_type = 4;
}

message CrawlLog {
  repeated CrawlResult result = 1;
}

message CrawlResult {
  optional string file_path = 1;
  optional string landing_url = 2;
  optional string landing_url_md5 =3;
  optional string url = 4;
  optional string url_md5 = 5;
  optional string timestamp = 6;
  optional bool success = 7;
}

// Parameter Type. Used for thread computer.
enum ParaType {
  NORMAL = 0;  // Call runnable_object.function(para)
  FILE_PATH = 1;  // Call runnable_object.function(open(para, 'r').read())
}
