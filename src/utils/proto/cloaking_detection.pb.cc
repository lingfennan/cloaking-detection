// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloaking_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cloaking_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloaking_detection {

namespace {

const ::google::protobuf::Descriptor* LearnedSites_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LearnedSites_reflection_ = NULL;
const ::google::protobuf::Descriptor* SitePatterns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SitePatterns_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pattern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pattern_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObservedSites_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObservedSites_reflection_ = NULL;
const ::google::protobuf::Descriptor* SiteObservations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SiteObservations_reflection_ = NULL;
const ::google::protobuf::Descriptor* Observation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Observation_reflection_ = NULL;
const ::google::protobuf::Descriptor* HtmlText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HtmlText_reflection_ = NULL;
const ::google::protobuf::Descriptor* HtmlDom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HtmlDom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feature_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimhashConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimhashConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimhashConfig_FeatureUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimhashConfig_FeatureUsage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SimhashConfig_SimhashType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClusterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClusterConfig_Algorithm_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cloaking_5fdetection_2eproto() {
  protobuf_AddDesc_cloaking_5fdetection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cloaking_detection.proto");
  GOOGLE_CHECK(file != NULL);
  LearnedSites_descriptor_ = file->message_type(0);
  static const int LearnedSites_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedSites, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedSites, timestamp_),
  };
  LearnedSites_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LearnedSites_descriptor_,
      LearnedSites::default_instance_,
      LearnedSites_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedSites, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedSites, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LearnedSites));
  SitePatterns_descriptor_ = file->message_type(1);
  static const int SitePatterns_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SitePatterns, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SitePatterns, pattern_),
  };
  SitePatterns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SitePatterns_descriptor_,
      SitePatterns::default_instance_,
      SitePatterns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SitePatterns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SitePatterns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SitePatterns));
  Pattern_descriptor_ = file->message_type(2);
  static const int Pattern_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, item_),
  };
  Pattern_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pattern_descriptor_,
      Pattern::default_instance_,
      Pattern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pattern, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pattern));
  Item_descriptor_ = file->message_type(3);
  static const int Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, simhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, count_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  ObservedSites_descriptor_ = file->message_type(4);
  static const int ObservedSites_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservedSites, site_),
  };
  ObservedSites_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObservedSites_descriptor_,
      ObservedSites::default_instance_,
      ObservedSites_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservedSites, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservedSites, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObservedSites));
  SiteObservations_descriptor_ = file->message_type(5);
  static const int SiteObservations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteObservations, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteObservations, observation_),
  };
  SiteObservations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SiteObservations_descriptor_,
      SiteObservations::default_instance_,
      SiteObservations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteObservations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiteObservations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SiteObservations));
  Observation_descriptor_ = file->message_type(6);
  static const int Observation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, landing_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, text_simhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, dom_simhash_),
  };
  Observation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Observation_descriptor_,
      Observation::default_instance_,
      Observation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Observation));
  HtmlText_descriptor_ = file->message_type(7);
  static const int HtmlText_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlText, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlText, bi_gram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlText, tri_gram_),
  };
  HtmlText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HtmlText_descriptor_,
      HtmlText::default_instance_,
      HtmlText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HtmlText));
  HtmlDom_descriptor_ = file->message_type(8);
  static const int HtmlDom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlDom, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlDom, bi_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlDom, tri_node_),
  };
  HtmlDom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HtmlDom_descriptor_,
      HtmlDom::default_instance_,
      HtmlDom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlDom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HtmlDom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HtmlDom));
  Feature_descriptor_ = file->message_type(9);
  static const int Feature_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, string_value_),
  };
  Feature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Feature_descriptor_,
      Feature::default_instance_,
      Feature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Feature));
  SimhashConfig_descriptor_ = file->message_type(10);
  static const int SimhashConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig, simhash_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig, usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig, maximum_threads_),
  };
  SimhashConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimhashConfig_descriptor_,
      SimhashConfig::default_instance_,
      SimhashConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimhashConfig));
  SimhashConfig_FeatureUsage_descriptor_ = SimhashConfig_descriptor_->nested_type(0);
  static const int SimhashConfig_FeatureUsage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig_FeatureUsage, gram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig_FeatureUsage, bi_gram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig_FeatureUsage, tri_gram_),
  };
  SimhashConfig_FeatureUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimhashConfig_FeatureUsage_descriptor_,
      SimhashConfig_FeatureUsage::default_instance_,
      SimhashConfig_FeatureUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig_FeatureUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimhashConfig_FeatureUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimhashConfig_FeatureUsage));
  SimhashConfig_SimhashType_descriptor_ = SimhashConfig_descriptor_->enum_type(0);
  ClusterConfig_descriptor_ = file->message_type(11);
  static const int ClusterConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, cluster_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, maximum_threads_),
  };
  ClusterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterConfig_descriptor_,
      ClusterConfig::default_instance_,
      ClusterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterConfig));
  ClusterConfig_Algorithm_descriptor_ = ClusterConfig_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cloaking_5fdetection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LearnedSites_descriptor_, &LearnedSites::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SitePatterns_descriptor_, &SitePatterns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pattern_descriptor_, &Pattern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObservedSites_descriptor_, &ObservedSites::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SiteObservations_descriptor_, &SiteObservations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Observation_descriptor_, &Observation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HtmlText_descriptor_, &HtmlText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HtmlDom_descriptor_, &HtmlDom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Feature_descriptor_, &Feature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimhashConfig_descriptor_, &SimhashConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimhashConfig_FeatureUsage_descriptor_, &SimhashConfig_FeatureUsage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterConfig_descriptor_, &ClusterConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cloaking_5fdetection_2eproto() {
  delete LearnedSites::default_instance_;
  delete LearnedSites_reflection_;
  delete SitePatterns::default_instance_;
  delete SitePatterns_reflection_;
  delete Pattern::default_instance_;
  delete Pattern_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete ObservedSites::default_instance_;
  delete ObservedSites_reflection_;
  delete SiteObservations::default_instance_;
  delete SiteObservations_reflection_;
  delete Observation::default_instance_;
  delete Observation_reflection_;
  delete HtmlText::default_instance_;
  delete HtmlText_reflection_;
  delete HtmlDom::default_instance_;
  delete HtmlDom_reflection_;
  delete Feature::default_instance_;
  delete Feature_reflection_;
  delete SimhashConfig::default_instance_;
  delete SimhashConfig_reflection_;
  delete SimhashConfig_FeatureUsage::default_instance_;
  delete SimhashConfig_FeatureUsage_reflection_;
  delete ClusterConfig::default_instance_;
  delete ClusterConfig_reflection_;
}

void protobuf_AddDesc_cloaking_5fdetection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030cloaking_detection.proto\022\022cloaking_det"
    "ection\"Q\n\014LearnedSites\022.\n\004site\030\001 \003(\0132 .c"
    "loaking_detection.SitePatterns\022\021\n\ttimest"
    "amp\030\002 \001(\t\"J\n\014SitePatterns\022\014\n\004name\030\001 \002(\t\022"
    ",\n\007pattern\030\002 \003(\0132\033.cloaking_detection.Pa"
    "ttern\"L\n\007Pattern\022\014\n\004mean\030\001 \002(\001\022\013\n\003std\030\002 "
    "\002(\001\022&\n\004item\030\003 \003(\0132\030.cloaking_detection.I"
    "tem\")\n\004Item\022\017\n\007simhash\030\001 \002(\004\022\020\n\005count\030\002 "
    "\001(\004:\0011\"C\n\rObservedSites\0222\n\004site\030\001 \003(\0132$."
    "cloaking_detection.SiteObservations\"V\n\020S"
    "iteObservations\022\014\n\004name\030\001 \002(\t\0224\n\013observa"
    "tion\030\002 \003(\0132\037.cloaking_detection.Observat"
    "ion\"s\n\013Observation\022\023\n\013landing_url\030\001 \002(\t\022"
    "\021\n\tfile_path\030\002 \002(\t\022\021\n\ttimestamp\030\003 \001(\t\022\024\n"
    "\014text_simhash\030\004 \001(\004\022\023\n\013dom_simhash\030\005 \001(\004"
    "\"\222\001\n\010HtmlText\022)\n\004word\030\001 \003(\0132\033.cloaking_d"
    "etection.Feature\022,\n\007bi_gram\030\002 \003(\0132\033.cloa"
    "king_detection.Feature\022-\n\010tri_gram\030\003 \003(\013"
    "2\033.cloaking_detection.Feature\"\221\001\n\007HtmlDo"
    "m\022)\n\004node\030\001 \003(\0132\033.cloaking_detection.Fea"
    "ture\022,\n\007bi_node\030\002 \003(\0132\033.cloaking_detecti"
    "on.Feature\022-\n\010tri_node\030\003 \003(\0132\033.cloaking_"
    "detection.Feature\"Y\n\007Feature\022\014\n\004name\030\001 \002"
    "(\t\022\024\n\tint_value\030\002 \001(\005:\0011\022\024\n\014double_value"
    "\030\003 \001(\001\022\024\n\014string_value\030\004 \001(\t\"\264\002\n\rSimhash"
    "Config\022C\n\014simhash_type\030\001 \002(\0162-.cloaking_"
    "detection.SimhashConfig.SimhashType\022=\n\005u"
    "sage\030\002 \001(\0132..cloaking_detection.SimhashC"
    "onfig.FeatureUsage\022\033\n\017maximum_threads\030\003 "
    "\001(\005:\00210\032R\n\014FeatureUsage\022\022\n\004gram\030\001 \001(\010:\004t"
    "rue\022\025\n\007bi_gram\030\002 \001(\010:\004true\022\027\n\010tri_gram\030\003"
    " \001(\010:\005false\".\n\013SimhashType\022\010\n\004TEXT\020\000\022\007\n\003"
    "DOM\020\001\022\014\n\010TEXT_DOM\020\002\"\353\001\n\rClusterConfig\022>\n"
    "\talgorithm\030\001 \002(\0162+.cloaking_detection.Cl"
    "usterConfig.Algorithm\022\026\n\016cluster_number\030"
    "\002 \001(\005\022\033\n\017maximum_threads\030\003 \001(\005:\00210\"e\n\tAl"
    "gorithm\022\025\n\021HAMMING_THRESHOLD\020\000\022\013\n\007K_MEAN"
    "S\020\001\022\027\n\023SPECTRAL_CLUSTERING\020\002\022\033\n\027HIERARCH"
    "ICAL_CLUSTERING\020\003", 1537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cloaking_detection.proto", &protobuf_RegisterTypes);
  LearnedSites::default_instance_ = new LearnedSites();
  SitePatterns::default_instance_ = new SitePatterns();
  Pattern::default_instance_ = new Pattern();
  Item::default_instance_ = new Item();
  ObservedSites::default_instance_ = new ObservedSites();
  SiteObservations::default_instance_ = new SiteObservations();
  Observation::default_instance_ = new Observation();
  HtmlText::default_instance_ = new HtmlText();
  HtmlDom::default_instance_ = new HtmlDom();
  Feature::default_instance_ = new Feature();
  SimhashConfig::default_instance_ = new SimhashConfig();
  SimhashConfig_FeatureUsage::default_instance_ = new SimhashConfig_FeatureUsage();
  ClusterConfig::default_instance_ = new ClusterConfig();
  LearnedSites::default_instance_->InitAsDefaultInstance();
  SitePatterns::default_instance_->InitAsDefaultInstance();
  Pattern::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  ObservedSites::default_instance_->InitAsDefaultInstance();
  SiteObservations::default_instance_->InitAsDefaultInstance();
  Observation::default_instance_->InitAsDefaultInstance();
  HtmlText::default_instance_->InitAsDefaultInstance();
  HtmlDom::default_instance_->InitAsDefaultInstance();
  Feature::default_instance_->InitAsDefaultInstance();
  SimhashConfig::default_instance_->InitAsDefaultInstance();
  SimhashConfig_FeatureUsage::default_instance_->InitAsDefaultInstance();
  ClusterConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cloaking_5fdetection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cloaking_5fdetection_2eproto {
  StaticDescriptorInitializer_cloaking_5fdetection_2eproto() {
    protobuf_AddDesc_cloaking_5fdetection_2eproto();
  }
} static_descriptor_initializer_cloaking_5fdetection_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LearnedSites::kSiteFieldNumber;
const int LearnedSites::kTimestampFieldNumber;
#endif  // !_MSC_VER

LearnedSites::LearnedSites()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.LearnedSites)
}

void LearnedSites::InitAsDefaultInstance() {
}

LearnedSites::LearnedSites(const LearnedSites& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.LearnedSites)
}

void LearnedSites::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearnedSites::~LearnedSites() {
  // @@protoc_insertion_point(destructor:cloaking_detection.LearnedSites)
  SharedDtor();
}

void LearnedSites::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void LearnedSites::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnedSites::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearnedSites_descriptor_;
}

const LearnedSites& LearnedSites::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

LearnedSites* LearnedSites::default_instance_ = NULL;

LearnedSites* LearnedSites::New() const {
  return new LearnedSites;
}

void LearnedSites::Clear() {
  if (has_timestamp()) {
    if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      timestamp_->clear();
    }
  }
  site_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LearnedSites::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.LearnedSites)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cloaking_detection.SitePatterns site = 1;
      case 1: {
        if (tag == 10) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_site;
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.LearnedSites)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.LearnedSites)
  return false;
#undef DO_
}

void LearnedSites::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.LearnedSites)
  // repeated .cloaking_detection.SitePatterns site = 1;
  for (int i = 0; i < this->site_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->site(i), output);
  }

  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.LearnedSites)
}

::google::protobuf::uint8* LearnedSites::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.LearnedSites)
  // repeated .cloaking_detection.SitePatterns site = 1;
  for (int i = 0; i < this->site_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->site(i), target);
  }

  // optional string timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.LearnedSites)
  return target;
}

int LearnedSites::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  // repeated .cloaking_detection.SitePatterns site = 1;
  total_size += 1 * this->site_size();
  for (int i = 0; i < this->site_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->site(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnedSites::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LearnedSites* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LearnedSites*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LearnedSites::MergeFrom(const LearnedSites& from) {
  GOOGLE_CHECK_NE(&from, this);
  site_.MergeFrom(from.site_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LearnedSites::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnedSites::CopyFrom(const LearnedSites& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnedSites::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->site())) return false;
  return true;
}

void LearnedSites::Swap(LearnedSites* other) {
  if (other != this) {
    site_.Swap(&other->site_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LearnedSites::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LearnedSites_descriptor_;
  metadata.reflection = LearnedSites_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SitePatterns::kNameFieldNumber;
const int SitePatterns::kPatternFieldNumber;
#endif  // !_MSC_VER

SitePatterns::SitePatterns()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.SitePatterns)
}

void SitePatterns::InitAsDefaultInstance() {
}

SitePatterns::SitePatterns(const SitePatterns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.SitePatterns)
}

void SitePatterns::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SitePatterns::~SitePatterns() {
  // @@protoc_insertion_point(destructor:cloaking_detection.SitePatterns)
  SharedDtor();
}

void SitePatterns::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SitePatterns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SitePatterns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SitePatterns_descriptor_;
}

const SitePatterns& SitePatterns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

SitePatterns* SitePatterns::default_instance_ = NULL;

SitePatterns* SitePatterns::New() const {
  return new SitePatterns;
}

void SitePatterns::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  pattern_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SitePatterns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.SitePatterns)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pattern;
        break;
      }

      // repeated .cloaking_detection.Pattern pattern = 2;
      case 2: {
        if (tag == 18) {
         parse_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pattern()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pattern;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.SitePatterns)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.SitePatterns)
  return false;
#undef DO_
}

void SitePatterns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.SitePatterns)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .cloaking_detection.Pattern pattern = 2;
  for (int i = 0; i < this->pattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pattern(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.SitePatterns)
}

::google::protobuf::uint8* SitePatterns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.SitePatterns)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .cloaking_detection.Pattern pattern = 2;
  for (int i = 0; i < this->pattern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pattern(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.SitePatterns)
  return target;
}

int SitePatterns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .cloaking_detection.Pattern pattern = 2;
  total_size += 1 * this->pattern_size();
  for (int i = 0; i < this->pattern_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pattern(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SitePatterns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SitePatterns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SitePatterns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SitePatterns::MergeFrom(const SitePatterns& from) {
  GOOGLE_CHECK_NE(&from, this);
  pattern_.MergeFrom(from.pattern_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SitePatterns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SitePatterns::CopyFrom(const SitePatterns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SitePatterns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->pattern())) return false;
  return true;
}

void SitePatterns::Swap(SitePatterns* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    pattern_.Swap(&other->pattern_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SitePatterns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SitePatterns_descriptor_;
  metadata.reflection = SitePatterns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pattern::kMeanFieldNumber;
const int Pattern::kStdFieldNumber;
const int Pattern::kItemFieldNumber;
#endif  // !_MSC_VER

Pattern::Pattern()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.Pattern)
}

void Pattern::InitAsDefaultInstance() {
}

Pattern::Pattern(const Pattern& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.Pattern)
}

void Pattern::SharedCtor() {
  _cached_size_ = 0;
  mean_ = 0;
  std_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pattern::~Pattern() {
  // @@protoc_insertion_point(destructor:cloaking_detection.Pattern)
  SharedDtor();
}

void Pattern::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pattern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pattern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pattern_descriptor_;
}

const Pattern& Pattern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

Pattern* Pattern::default_instance_ = NULL;

Pattern* Pattern::New() const {
  return new Pattern;
}

void Pattern::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pattern*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mean_, std_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.Pattern)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double mean = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_std;
        break;
      }

      // required double std = 2;
      case 2: {
        if (tag == 17) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .cloaking_detection.Item item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.Pattern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.Pattern)
  return false;
#undef DO_
}

void Pattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.Pattern)
  // required double mean = 1;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mean(), output);
  }

  // required double std = 2;
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->std(), output);
  }

  // repeated .cloaking_detection.Item item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.Pattern)
}

::google::protobuf::uint8* Pattern::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.Pattern)
  // required double mean = 1;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mean(), target);
  }

  // required double std = 2;
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->std(), target);
  }

  // repeated .cloaking_detection.Item item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.Pattern)
  return target;
}

int Pattern::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double mean = 1;
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // required double std = 2;
    if (has_std()) {
      total_size += 1 + 8;
    }

  }
  // repeated .cloaking_detection.Item item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pattern::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pattern* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pattern*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pattern::MergeFrom(const Pattern& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pattern::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pattern::CopyFrom(const Pattern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pattern::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void Pattern::Swap(Pattern* other) {
  if (other != this) {
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pattern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pattern_descriptor_;
  metadata.reflection = Pattern_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item::kSimhashFieldNumber;
const int Item::kCountFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.Item)
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.Item)
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  simhash_ = GOOGLE_ULONGLONG(0);
  count_ = GOOGLE_ULONGLONG(1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:cloaking_detection.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    simhash_ = GOOGLE_ULONGLONG(0);
    count_ = GOOGLE_ULONGLONG(1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 simhash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &simhash_)));
          set_has_simhash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint64 count = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.Item)
  // required uint64 simhash = 1;
  if (has_simhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->simhash(), output);
  }

  // optional uint64 count = 2 [default = 1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.Item)
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.Item)
  // required uint64 simhash = 1;
  if (has_simhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->simhash(), target);
  }

  // optional uint64 count = 2 [default = 1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.Item)
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 simhash = 1;
    if (has_simhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->simhash());
    }

    // optional uint64 count = 2 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simhash()) {
      set_simhash(from.simhash());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(simhash_, other->simhash_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObservedSites::kSiteFieldNumber;
#endif  // !_MSC_VER

ObservedSites::ObservedSites()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.ObservedSites)
}

void ObservedSites::InitAsDefaultInstance() {
}

ObservedSites::ObservedSites(const ObservedSites& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.ObservedSites)
}

void ObservedSites::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObservedSites::~ObservedSites() {
  // @@protoc_insertion_point(destructor:cloaking_detection.ObservedSites)
  SharedDtor();
}

void ObservedSites::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObservedSites::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObservedSites::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObservedSites_descriptor_;
}

const ObservedSites& ObservedSites::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

ObservedSites* ObservedSites::default_instance_ = NULL;

ObservedSites* ObservedSites::New() const {
  return new ObservedSites;
}

void ObservedSites::Clear() {
  site_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObservedSites::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.ObservedSites)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cloaking_detection.SiteObservations site = 1;
      case 1: {
        if (tag == 10) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_site;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.ObservedSites)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.ObservedSites)
  return false;
#undef DO_
}

void ObservedSites::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.ObservedSites)
  // repeated .cloaking_detection.SiteObservations site = 1;
  for (int i = 0; i < this->site_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->site(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.ObservedSites)
}

::google::protobuf::uint8* ObservedSites::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.ObservedSites)
  // repeated .cloaking_detection.SiteObservations site = 1;
  for (int i = 0; i < this->site_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->site(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.ObservedSites)
  return target;
}

int ObservedSites::ByteSize() const {
  int total_size = 0;

  // repeated .cloaking_detection.SiteObservations site = 1;
  total_size += 1 * this->site_size();
  for (int i = 0; i < this->site_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->site(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObservedSites::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObservedSites* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObservedSites*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObservedSites::MergeFrom(const ObservedSites& from) {
  GOOGLE_CHECK_NE(&from, this);
  site_.MergeFrom(from.site_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObservedSites::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservedSites::CopyFrom(const ObservedSites& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservedSites::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->site())) return false;
  return true;
}

void ObservedSites::Swap(ObservedSites* other) {
  if (other != this) {
    site_.Swap(&other->site_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObservedSites::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObservedSites_descriptor_;
  metadata.reflection = ObservedSites_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SiteObservations::kNameFieldNumber;
const int SiteObservations::kObservationFieldNumber;
#endif  // !_MSC_VER

SiteObservations::SiteObservations()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.SiteObservations)
}

void SiteObservations::InitAsDefaultInstance() {
}

SiteObservations::SiteObservations(const SiteObservations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.SiteObservations)
}

void SiteObservations::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SiteObservations::~SiteObservations() {
  // @@protoc_insertion_point(destructor:cloaking_detection.SiteObservations)
  SharedDtor();
}

void SiteObservations::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SiteObservations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiteObservations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SiteObservations_descriptor_;
}

const SiteObservations& SiteObservations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

SiteObservations* SiteObservations::default_instance_ = NULL;

SiteObservations* SiteObservations::New() const {
  return new SiteObservations;
}

void SiteObservations::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  observation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SiteObservations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.SiteObservations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_observation;
        break;
      }

      // repeated .cloaking_detection.Observation observation = 2;
      case 2: {
        if (tag == 18) {
         parse_observation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_observation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_observation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.SiteObservations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.SiteObservations)
  return false;
#undef DO_
}

void SiteObservations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.SiteObservations)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .cloaking_detection.Observation observation = 2;
  for (int i = 0; i < this->observation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->observation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.SiteObservations)
}

::google::protobuf::uint8* SiteObservations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.SiteObservations)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .cloaking_detection.Observation observation = 2;
  for (int i = 0; i < this->observation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->observation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.SiteObservations)
  return target;
}

int SiteObservations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .cloaking_detection.Observation observation = 2;
  total_size += 1 * this->observation_size();
  for (int i = 0; i < this->observation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->observation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiteObservations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SiteObservations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SiteObservations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SiteObservations::MergeFrom(const SiteObservations& from) {
  GOOGLE_CHECK_NE(&from, this);
  observation_.MergeFrom(from.observation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SiteObservations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteObservations::CopyFrom(const SiteObservations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteObservations::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->observation())) return false;
  return true;
}

void SiteObservations::Swap(SiteObservations* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    observation_.Swap(&other->observation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SiteObservations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SiteObservations_descriptor_;
  metadata.reflection = SiteObservations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Observation::kLandingUrlFieldNumber;
const int Observation::kFilePathFieldNumber;
const int Observation::kTimestampFieldNumber;
const int Observation::kTextSimhashFieldNumber;
const int Observation::kDomSimhashFieldNumber;
#endif  // !_MSC_VER

Observation::Observation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.Observation)
}

void Observation::InitAsDefaultInstance() {
}

Observation::Observation(const Observation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.Observation)
}

void Observation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  landing_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_simhash_ = GOOGLE_ULONGLONG(0);
  dom_simhash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Observation::~Observation() {
  // @@protoc_insertion_point(destructor:cloaking_detection.Observation)
  SharedDtor();
}

void Observation::SharedDtor() {
  if (landing_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete landing_url_;
  }
  if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_path_;
  }
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void Observation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Observation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Observation_descriptor_;
}

const Observation& Observation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

Observation* Observation::default_instance_ = NULL;

Observation* Observation::New() const {
  return new Observation;
}

void Observation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Observation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(text_simhash_, dom_simhash_);
    if (has_landing_url()) {
      if (landing_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        landing_url_->clear();
      }
    }
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_path_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestamp_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Observation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.Observation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string landing_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_landing_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->landing_url().data(), this->landing_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "landing_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_path;
        break;
      }

      // required string file_path = 2;
      case 2: {
        if (tag == 18) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 3;
      case 3: {
        if (tag == 26) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_text_simhash;
        break;
      }

      // optional uint64 text_simhash = 4;
      case 4: {
        if (tag == 32) {
         parse_text_simhash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &text_simhash_)));
          set_has_text_simhash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dom_simhash;
        break;
      }

      // optional uint64 dom_simhash = 5;
      case 5: {
        if (tag == 40) {
         parse_dom_simhash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dom_simhash_)));
          set_has_dom_simhash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.Observation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.Observation)
  return false;
#undef DO_
}

void Observation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.Observation)
  // required string landing_url = 1;
  if (has_landing_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->landing_url().data(), this->landing_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "landing_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->landing_url(), output);
  }

  // required string file_path = 2;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_path(), output);
  }

  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timestamp(), output);
  }

  // optional uint64 text_simhash = 4;
  if (has_text_simhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->text_simhash(), output);
  }

  // optional uint64 dom_simhash = 5;
  if (has_dom_simhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dom_simhash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.Observation)
}

::google::protobuf::uint8* Observation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.Observation)
  // required string landing_url = 1;
  if (has_landing_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->landing_url().data(), this->landing_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "landing_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->landing_url(), target);
  }

  // required string file_path = 2;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_path(), target);
  }

  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }

  // optional uint64 text_simhash = 4;
  if (has_text_simhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->text_simhash(), target);
  }

  // optional uint64 dom_simhash = 5;
  if (has_dom_simhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dom_simhash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.Observation)
  return target;
}

int Observation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string landing_url = 1;
    if (has_landing_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->landing_url());
    }

    // required string file_path = 2;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }

    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional uint64 text_simhash = 4;
    if (has_text_simhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->text_simhash());
    }

    // optional uint64 dom_simhash = 5;
    if (has_dom_simhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dom_simhash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Observation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Observation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Observation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Observation::MergeFrom(const Observation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_landing_url()) {
      set_landing_url(from.landing_url());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_text_simhash()) {
      set_text_simhash(from.text_simhash());
    }
    if (from.has_dom_simhash()) {
      set_dom_simhash(from.dom_simhash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Observation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Observation::CopyFrom(const Observation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Observation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Observation::Swap(Observation* other) {
  if (other != this) {
    std::swap(landing_url_, other->landing_url_);
    std::swap(file_path_, other->file_path_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(text_simhash_, other->text_simhash_);
    std::swap(dom_simhash_, other->dom_simhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Observation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Observation_descriptor_;
  metadata.reflection = Observation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HtmlText::kWordFieldNumber;
const int HtmlText::kBiGramFieldNumber;
const int HtmlText::kTriGramFieldNumber;
#endif  // !_MSC_VER

HtmlText::HtmlText()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.HtmlText)
}

void HtmlText::InitAsDefaultInstance() {
}

HtmlText::HtmlText(const HtmlText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.HtmlText)
}

void HtmlText::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HtmlText::~HtmlText() {
  // @@protoc_insertion_point(destructor:cloaking_detection.HtmlText)
  SharedDtor();
}

void HtmlText::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HtmlText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HtmlText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HtmlText_descriptor_;
}

const HtmlText& HtmlText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

HtmlText* HtmlText::default_instance_ = NULL;

HtmlText* HtmlText::New() const {
  return new HtmlText;
}

void HtmlText::Clear() {
  word_.Clear();
  bi_gram_.Clear();
  tri_gram_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HtmlText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.HtmlText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cloaking_detection.Feature word = 1;
      case 1: {
        if (tag == 10) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_word()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_word;
        if (input->ExpectTag(18)) goto parse_bi_gram;
        break;
      }

      // repeated .cloaking_detection.Feature bi_gram = 2;
      case 2: {
        if (tag == 18) {
         parse_bi_gram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bi_gram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bi_gram;
        if (input->ExpectTag(26)) goto parse_tri_gram;
        break;
      }

      // repeated .cloaking_detection.Feature tri_gram = 3;
      case 3: {
        if (tag == 26) {
         parse_tri_gram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tri_gram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tri_gram;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.HtmlText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.HtmlText)
  return false;
#undef DO_
}

void HtmlText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.HtmlText)
  // repeated .cloaking_detection.Feature word = 1;
  for (int i = 0; i < this->word_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->word(i), output);
  }

  // repeated .cloaking_detection.Feature bi_gram = 2;
  for (int i = 0; i < this->bi_gram_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bi_gram(i), output);
  }

  // repeated .cloaking_detection.Feature tri_gram = 3;
  for (int i = 0; i < this->tri_gram_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tri_gram(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.HtmlText)
}

::google::protobuf::uint8* HtmlText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.HtmlText)
  // repeated .cloaking_detection.Feature word = 1;
  for (int i = 0; i < this->word_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->word(i), target);
  }

  // repeated .cloaking_detection.Feature bi_gram = 2;
  for (int i = 0; i < this->bi_gram_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bi_gram(i), target);
  }

  // repeated .cloaking_detection.Feature tri_gram = 3;
  for (int i = 0; i < this->tri_gram_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tri_gram(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.HtmlText)
  return target;
}

int HtmlText::ByteSize() const {
  int total_size = 0;

  // repeated .cloaking_detection.Feature word = 1;
  total_size += 1 * this->word_size();
  for (int i = 0; i < this->word_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->word(i));
  }

  // repeated .cloaking_detection.Feature bi_gram = 2;
  total_size += 1 * this->bi_gram_size();
  for (int i = 0; i < this->bi_gram_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bi_gram(i));
  }

  // repeated .cloaking_detection.Feature tri_gram = 3;
  total_size += 1 * this->tri_gram_size();
  for (int i = 0; i < this->tri_gram_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tri_gram(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HtmlText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HtmlText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HtmlText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HtmlText::MergeFrom(const HtmlText& from) {
  GOOGLE_CHECK_NE(&from, this);
  word_.MergeFrom(from.word_);
  bi_gram_.MergeFrom(from.bi_gram_);
  tri_gram_.MergeFrom(from.tri_gram_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HtmlText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HtmlText::CopyFrom(const HtmlText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlText::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->word())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bi_gram())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tri_gram())) return false;
  return true;
}

void HtmlText::Swap(HtmlText* other) {
  if (other != this) {
    word_.Swap(&other->word_);
    bi_gram_.Swap(&other->bi_gram_);
    tri_gram_.Swap(&other->tri_gram_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HtmlText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HtmlText_descriptor_;
  metadata.reflection = HtmlText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HtmlDom::kNodeFieldNumber;
const int HtmlDom::kBiNodeFieldNumber;
const int HtmlDom::kTriNodeFieldNumber;
#endif  // !_MSC_VER

HtmlDom::HtmlDom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.HtmlDom)
}

void HtmlDom::InitAsDefaultInstance() {
}

HtmlDom::HtmlDom(const HtmlDom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.HtmlDom)
}

void HtmlDom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HtmlDom::~HtmlDom() {
  // @@protoc_insertion_point(destructor:cloaking_detection.HtmlDom)
  SharedDtor();
}

void HtmlDom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HtmlDom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HtmlDom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HtmlDom_descriptor_;
}

const HtmlDom& HtmlDom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

HtmlDom* HtmlDom::default_instance_ = NULL;

HtmlDom* HtmlDom::New() const {
  return new HtmlDom;
}

void HtmlDom::Clear() {
  node_.Clear();
  bi_node_.Clear();
  tri_node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HtmlDom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.HtmlDom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cloaking_detection.Feature node = 1;
      case 1: {
        if (tag == 10) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectTag(18)) goto parse_bi_node;
        break;
      }

      // repeated .cloaking_detection.Feature bi_node = 2;
      case 2: {
        if (tag == 18) {
         parse_bi_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bi_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bi_node;
        if (input->ExpectTag(26)) goto parse_tri_node;
        break;
      }

      // repeated .cloaking_detection.Feature tri_node = 3;
      case 3: {
        if (tag == 26) {
         parse_tri_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tri_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tri_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.HtmlDom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.HtmlDom)
  return false;
#undef DO_
}

void HtmlDom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.HtmlDom)
  // repeated .cloaking_detection.Feature node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // repeated .cloaking_detection.Feature bi_node = 2;
  for (int i = 0; i < this->bi_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bi_node(i), output);
  }

  // repeated .cloaking_detection.Feature tri_node = 3;
  for (int i = 0; i < this->tri_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tri_node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.HtmlDom)
}

::google::protobuf::uint8* HtmlDom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.HtmlDom)
  // repeated .cloaking_detection.Feature node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  // repeated .cloaking_detection.Feature bi_node = 2;
  for (int i = 0; i < this->bi_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bi_node(i), target);
  }

  // repeated .cloaking_detection.Feature tri_node = 3;
  for (int i = 0; i < this->tri_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tri_node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.HtmlDom)
  return target;
}

int HtmlDom::ByteSize() const {
  int total_size = 0;

  // repeated .cloaking_detection.Feature node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  // repeated .cloaking_detection.Feature bi_node = 2;
  total_size += 1 * this->bi_node_size();
  for (int i = 0; i < this->bi_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bi_node(i));
  }

  // repeated .cloaking_detection.Feature tri_node = 3;
  total_size += 1 * this->tri_node_size();
  for (int i = 0; i < this->tri_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tri_node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HtmlDom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HtmlDom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HtmlDom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HtmlDom::MergeFrom(const HtmlDom& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  bi_node_.MergeFrom(from.bi_node_);
  tri_node_.MergeFrom(from.tri_node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HtmlDom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HtmlDom::CopyFrom(const HtmlDom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlDom::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bi_node())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tri_node())) return false;
  return true;
}

void HtmlDom::Swap(HtmlDom* other) {
  if (other != this) {
    node_.Swap(&other->node_);
    bi_node_.Swap(&other->bi_node_);
    tri_node_.Swap(&other->tri_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HtmlDom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HtmlDom_descriptor_;
  metadata.reflection = HtmlDom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Feature::kNameFieldNumber;
const int Feature::kIntValueFieldNumber;
const int Feature::kDoubleValueFieldNumber;
const int Feature::kStringValueFieldNumber;
#endif  // !_MSC_VER

Feature::Feature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.Feature)
}

void Feature::InitAsDefaultInstance() {
}

Feature::Feature(const Feature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.Feature)
}

void Feature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  int_value_ = 1;
  double_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:cloaking_detection.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feature_descriptor_;
}

const Feature& Feature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

Feature* Feature::default_instance_ = NULL;

Feature* Feature::New() const {
  return new Feature;
}

void Feature::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    int_value_ = 1;
    double_value_ = 0;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        string_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int_value;
        break;
      }

      // optional int32 int_value = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_double_value;
        break;
      }

      // optional double double_value = 3;
      case 3: {
        if (tag == 25) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_string_value;
        break;
      }

      // optional string string_value = 4;
      case 4: {
        if (tag == 34) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "string_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.Feature)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 int_value = 2 [default = 1];
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_value(), output);
  }

  // optional double double_value = 3;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
  }

  // optional string string_value = 4;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->string_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.Feature)
}

::google::protobuf::uint8* Feature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.Feature)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 int_value = 2 [default = 1];
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_value(), target);
  }

  // optional double double_value = 3;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_value(), target);
  }

  // optional string string_value = 4;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.Feature)
  return target;
}

int Feature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 int_value = 2 [default = 1];
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional double double_value = 3;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

    // optional string string_value = 4;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Feature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Feature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Feature::Swap(Feature* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(int_value_, other->int_value_);
    std::swap(double_value_, other->double_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feature_descriptor_;
  metadata.reflection = Feature_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SimhashConfig_SimhashType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimhashConfig_SimhashType_descriptor_;
}
bool SimhashConfig_SimhashType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SimhashConfig_SimhashType SimhashConfig::TEXT;
const SimhashConfig_SimhashType SimhashConfig::DOM;
const SimhashConfig_SimhashType SimhashConfig::TEXT_DOM;
const SimhashConfig_SimhashType SimhashConfig::SimhashType_MIN;
const SimhashConfig_SimhashType SimhashConfig::SimhashType_MAX;
const int SimhashConfig::SimhashType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SimhashConfig_FeatureUsage::kGramFieldNumber;
const int SimhashConfig_FeatureUsage::kBiGramFieldNumber;
const int SimhashConfig_FeatureUsage::kTriGramFieldNumber;
#endif  // !_MSC_VER

SimhashConfig_FeatureUsage::SimhashConfig_FeatureUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.SimhashConfig.FeatureUsage)
}

void SimhashConfig_FeatureUsage::InitAsDefaultInstance() {
}

SimhashConfig_FeatureUsage::SimhashConfig_FeatureUsage(const SimhashConfig_FeatureUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.SimhashConfig.FeatureUsage)
}

void SimhashConfig_FeatureUsage::SharedCtor() {
  _cached_size_ = 0;
  gram_ = true;
  bi_gram_ = true;
  tri_gram_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimhashConfig_FeatureUsage::~SimhashConfig_FeatureUsage() {
  // @@protoc_insertion_point(destructor:cloaking_detection.SimhashConfig.FeatureUsage)
  SharedDtor();
}

void SimhashConfig_FeatureUsage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimhashConfig_FeatureUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimhashConfig_FeatureUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimhashConfig_FeatureUsage_descriptor_;
}

const SimhashConfig_FeatureUsage& SimhashConfig_FeatureUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

SimhashConfig_FeatureUsage* SimhashConfig_FeatureUsage::default_instance_ = NULL;

SimhashConfig_FeatureUsage* SimhashConfig_FeatureUsage::New() const {
  return new SimhashConfig_FeatureUsage;
}

void SimhashConfig_FeatureUsage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    gram_ = true;
    bi_gram_ = true;
    tri_gram_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimhashConfig_FeatureUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.SimhashConfig.FeatureUsage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool gram = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gram_)));
          set_has_gram();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bi_gram;
        break;
      }

      // optional bool bi_gram = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_bi_gram:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bi_gram_)));
          set_has_bi_gram();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tri_gram;
        break;
      }

      // optional bool tri_gram = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_tri_gram:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tri_gram_)));
          set_has_tri_gram();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.SimhashConfig.FeatureUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.SimhashConfig.FeatureUsage)
  return false;
#undef DO_
}

void SimhashConfig_FeatureUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.SimhashConfig.FeatureUsage)
  // optional bool gram = 1 [default = true];
  if (has_gram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->gram(), output);
  }

  // optional bool bi_gram = 2 [default = true];
  if (has_bi_gram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bi_gram(), output);
  }

  // optional bool tri_gram = 3 [default = false];
  if (has_tri_gram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->tri_gram(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.SimhashConfig.FeatureUsage)
}

::google::protobuf::uint8* SimhashConfig_FeatureUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.SimhashConfig.FeatureUsage)
  // optional bool gram = 1 [default = true];
  if (has_gram()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->gram(), target);
  }

  // optional bool bi_gram = 2 [default = true];
  if (has_bi_gram()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bi_gram(), target);
  }

  // optional bool tri_gram = 3 [default = false];
  if (has_tri_gram()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->tri_gram(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.SimhashConfig.FeatureUsage)
  return target;
}

int SimhashConfig_FeatureUsage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool gram = 1 [default = true];
    if (has_gram()) {
      total_size += 1 + 1;
    }

    // optional bool bi_gram = 2 [default = true];
    if (has_bi_gram()) {
      total_size += 1 + 1;
    }

    // optional bool tri_gram = 3 [default = false];
    if (has_tri_gram()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimhashConfig_FeatureUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimhashConfig_FeatureUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimhashConfig_FeatureUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimhashConfig_FeatureUsage::MergeFrom(const SimhashConfig_FeatureUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gram()) {
      set_gram(from.gram());
    }
    if (from.has_bi_gram()) {
      set_bi_gram(from.bi_gram());
    }
    if (from.has_tri_gram()) {
      set_tri_gram(from.tri_gram());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimhashConfig_FeatureUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimhashConfig_FeatureUsage::CopyFrom(const SimhashConfig_FeatureUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimhashConfig_FeatureUsage::IsInitialized() const {

  return true;
}

void SimhashConfig_FeatureUsage::Swap(SimhashConfig_FeatureUsage* other) {
  if (other != this) {
    std::swap(gram_, other->gram_);
    std::swap(bi_gram_, other->bi_gram_);
    std::swap(tri_gram_, other->tri_gram_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimhashConfig_FeatureUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimhashConfig_FeatureUsage_descriptor_;
  metadata.reflection = SimhashConfig_FeatureUsage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SimhashConfig::kSimhashTypeFieldNumber;
const int SimhashConfig::kUsageFieldNumber;
const int SimhashConfig::kMaximumThreadsFieldNumber;
#endif  // !_MSC_VER

SimhashConfig::SimhashConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.SimhashConfig)
}

void SimhashConfig::InitAsDefaultInstance() {
  usage_ = const_cast< ::cloaking_detection::SimhashConfig_FeatureUsage*>(&::cloaking_detection::SimhashConfig_FeatureUsage::default_instance());
}

SimhashConfig::SimhashConfig(const SimhashConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.SimhashConfig)
}

void SimhashConfig::SharedCtor() {
  _cached_size_ = 0;
  simhash_type_ = 0;
  usage_ = NULL;
  maximum_threads_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimhashConfig::~SimhashConfig() {
  // @@protoc_insertion_point(destructor:cloaking_detection.SimhashConfig)
  SharedDtor();
}

void SimhashConfig::SharedDtor() {
  if (this != default_instance_) {
    delete usage_;
  }
}

void SimhashConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimhashConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimhashConfig_descriptor_;
}

const SimhashConfig& SimhashConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

SimhashConfig* SimhashConfig::default_instance_ = NULL;

SimhashConfig* SimhashConfig::New() const {
  return new SimhashConfig;
}

void SimhashConfig::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    simhash_type_ = 0;
    if (has_usage()) {
      if (usage_ != NULL) usage_->::cloaking_detection::SimhashConfig_FeatureUsage::Clear();
    }
    maximum_threads_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimhashConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.SimhashConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cloaking_detection.SimhashConfig.SimhashType simhash_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloaking_detection::SimhashConfig_SimhashType_IsValid(value)) {
            set_simhash_type(static_cast< ::cloaking_detection::SimhashConfig_SimhashType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_usage;
        break;
      }

      // optional .cloaking_detection.SimhashConfig.FeatureUsage usage = 2;
      case 2: {
        if (tag == 18) {
         parse_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maximum_threads;
        break;
      }

      // optional int32 maximum_threads = 3 [default = 10];
      case 3: {
        if (tag == 24) {
         parse_maximum_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_threads_)));
          set_has_maximum_threads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.SimhashConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.SimhashConfig)
  return false;
#undef DO_
}

void SimhashConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.SimhashConfig)
  // required .cloaking_detection.SimhashConfig.SimhashType simhash_type = 1;
  if (has_simhash_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->simhash_type(), output);
  }

  // optional .cloaking_detection.SimhashConfig.FeatureUsage usage = 2;
  if (has_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usage(), output);
  }

  // optional int32 maximum_threads = 3 [default = 10];
  if (has_maximum_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maximum_threads(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.SimhashConfig)
}

::google::protobuf::uint8* SimhashConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.SimhashConfig)
  // required .cloaking_detection.SimhashConfig.SimhashType simhash_type = 1;
  if (has_simhash_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->simhash_type(), target);
  }

  // optional .cloaking_detection.SimhashConfig.FeatureUsage usage = 2;
  if (has_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usage(), target);
  }

  // optional int32 maximum_threads = 3 [default = 10];
  if (has_maximum_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maximum_threads(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.SimhashConfig)
  return target;
}

int SimhashConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cloaking_detection.SimhashConfig.SimhashType simhash_type = 1;
    if (has_simhash_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->simhash_type());
    }

    // optional .cloaking_detection.SimhashConfig.FeatureUsage usage = 2;
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usage());
    }

    // optional int32 maximum_threads = 3 [default = 10];
    if (has_maximum_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_threads());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimhashConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimhashConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimhashConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimhashConfig::MergeFrom(const SimhashConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simhash_type()) {
      set_simhash_type(from.simhash_type());
    }
    if (from.has_usage()) {
      mutable_usage()->::cloaking_detection::SimhashConfig_FeatureUsage::MergeFrom(from.usage());
    }
    if (from.has_maximum_threads()) {
      set_maximum_threads(from.maximum_threads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimhashConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimhashConfig::CopyFrom(const SimhashConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimhashConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SimhashConfig::Swap(SimhashConfig* other) {
  if (other != this) {
    std::swap(simhash_type_, other->simhash_type_);
    std::swap(usage_, other->usage_);
    std::swap(maximum_threads_, other->maximum_threads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimhashConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimhashConfig_descriptor_;
  metadata.reflection = SimhashConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClusterConfig_Algorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterConfig_Algorithm_descriptor_;
}
bool ClusterConfig_Algorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClusterConfig_Algorithm ClusterConfig::HAMMING_THRESHOLD;
const ClusterConfig_Algorithm ClusterConfig::K_MEANS;
const ClusterConfig_Algorithm ClusterConfig::SPECTRAL_CLUSTERING;
const ClusterConfig_Algorithm ClusterConfig::HIERARCHICAL_CLUSTERING;
const ClusterConfig_Algorithm ClusterConfig::Algorithm_MIN;
const ClusterConfig_Algorithm ClusterConfig::Algorithm_MAX;
const int ClusterConfig::Algorithm_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClusterConfig::kAlgorithmFieldNumber;
const int ClusterConfig::kClusterNumberFieldNumber;
const int ClusterConfig::kMaximumThreadsFieldNumber;
#endif  // !_MSC_VER

ClusterConfig::ClusterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloaking_detection.ClusterConfig)
}

void ClusterConfig::InitAsDefaultInstance() {
}

ClusterConfig::ClusterConfig(const ClusterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cloaking_detection.ClusterConfig)
}

void ClusterConfig::SharedCtor() {
  _cached_size_ = 0;
  algorithm_ = 0;
  cluster_number_ = 0;
  maximum_threads_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterConfig::~ClusterConfig() {
  // @@protoc_insertion_point(destructor:cloaking_detection.ClusterConfig)
  SharedDtor();
}

void ClusterConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClusterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterConfig_descriptor_;
}

const ClusterConfig& ClusterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cloaking_5fdetection_2eproto();
  return *default_instance_;
}

ClusterConfig* ClusterConfig::default_instance_ = NULL;

ClusterConfig* ClusterConfig::New() const {
  return new ClusterConfig;
}

void ClusterConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClusterConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(algorithm_, cluster_number_);
    maximum_threads_ = 10;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cloaking_detection.ClusterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cloaking_detection.ClusterConfig.Algorithm algorithm = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloaking_detection::ClusterConfig_Algorithm_IsValid(value)) {
            set_algorithm(static_cast< ::cloaking_detection::ClusterConfig_Algorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cluster_number;
        break;
      }

      // optional int32 cluster_number = 2;
      case 2: {
        if (tag == 16) {
         parse_cluster_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_number_)));
          set_has_cluster_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maximum_threads;
        break;
      }

      // optional int32 maximum_threads = 3 [default = 10];
      case 3: {
        if (tag == 24) {
         parse_maximum_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_threads_)));
          set_has_maximum_threads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cloaking_detection.ClusterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cloaking_detection.ClusterConfig)
  return false;
#undef DO_
}

void ClusterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cloaking_detection.ClusterConfig)
  // required .cloaking_detection.ClusterConfig.Algorithm algorithm = 1;
  if (has_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->algorithm(), output);
  }

  // optional int32 cluster_number = 2;
  if (has_cluster_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cluster_number(), output);
  }

  // optional int32 maximum_threads = 3 [default = 10];
  if (has_maximum_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maximum_threads(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cloaking_detection.ClusterConfig)
}

::google::protobuf::uint8* ClusterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloaking_detection.ClusterConfig)
  // required .cloaking_detection.ClusterConfig.Algorithm algorithm = 1;
  if (has_algorithm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->algorithm(), target);
  }

  // optional int32 cluster_number = 2;
  if (has_cluster_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cluster_number(), target);
  }

  // optional int32 maximum_threads = 3 [default = 10];
  if (has_maximum_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maximum_threads(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloaking_detection.ClusterConfig)
  return target;
}

int ClusterConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cloaking_detection.ClusterConfig.Algorithm algorithm = 1;
    if (has_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
    }

    // optional int32 cluster_number = 2;
    if (has_cluster_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cluster_number());
    }

    // optional int32 maximum_threads = 3 [default = 10];
    if (has_maximum_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_threads());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterConfig::MergeFrom(const ClusterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_algorithm()) {
      set_algorithm(from.algorithm());
    }
    if (from.has_cluster_number()) {
      set_cluster_number(from.cluster_number());
    }
    if (from.has_maximum_threads()) {
      set_maximum_threads(from.maximum_threads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterConfig::CopyFrom(const ClusterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClusterConfig::Swap(ClusterConfig* other) {
  if (other != this) {
    std::swap(algorithm_, other->algorithm_);
    std::swap(cluster_number_, other->cluster_number_);
    std::swap(maximum_threads_, other->maximum_threads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterConfig_descriptor_;
  metadata.reflection = ClusterConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cloaking_detection

// @@protoc_insertion_point(global_scope)
